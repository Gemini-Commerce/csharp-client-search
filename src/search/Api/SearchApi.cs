/*
 * Search Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using search.Client;
using search.Model;

namespace search.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Indexes configuration
        /// </summary>
        /// <remarks>
        /// Create or update indexes by a passed configuration schema
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object SearchConfiguration(SearchConfigRequest body, int operationIndex = 0);

        /// <summary>
        /// Indexes configuration
        /// </summary>
        /// <remarks>
        /// Create or update indexes by a passed configuration schema
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SearchConfigurationWithHttpInfo(SearchConfigRequest body, int operationIndex = 0);
        /// <summary>
        /// Delete Indexes
        /// </summary>
        /// <remarks>
        /// Delete indexes from ElasticSearch and Cassandra configuration
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchDeleteResponse</returns>
        SearchDeleteResponse SearchDelete(SearchDeleteRequest body, int operationIndex = 0);

        /// <summary>
        /// Delete Indexes
        /// </summary>
        /// <remarks>
        /// Delete indexes from ElasticSearch and Cassandra configuration
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchDeleteResponse</returns>
        ApiResponse<SearchDeleteResponse> SearchDeleteWithHttpInfo(SearchDeleteRequest body, int operationIndex = 0);
        /// <summary>
        /// Insert or replace documents to different elasticsearch indexes
        /// </summary>
        /// <remarks>
        /// Insert or replace a document or more in a specified ElasticSearch index of a tenant
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchWriteResponse</returns>
        SearchWriteResponse SearchInsertOrReplace(SearchWriteRequest body, int operationIndex = 0);

        /// <summary>
        /// Insert or replace documents to different elasticsearch indexes
        /// </summary>
        /// <remarks>
        /// Insert or replace a document or more in a specified ElasticSearch index of a tenant
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchWriteResponse</returns>
        ApiResponse<SearchWriteResponse> SearchInsertOrReplaceWithHttpInfo(SearchWriteRequest body, int operationIndex = 0);
        /// <summary>
        /// Send queries to different elasticsearch indexes
        /// </summary>
        /// <remarks>
        /// MSearch promises to send a list of queries to elasticsearch to be executed on different indexes, it can also be used as an autocomplete by adding the corresponding TYPE
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchQueryResponse</returns>
        SearchQueryResponse SearchMSearch(SearchQueryRequest body, int operationIndex = 0);

        /// <summary>
        /// Send queries to different elasticsearch indexes
        /// </summary>
        /// <remarks>
        /// MSearch promises to send a list of queries to elasticsearch to be executed on different indexes, it can also be used as an autocomplete by adding the corresponding TYPE
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchQueryResponse</returns>
        ApiResponse<SearchQueryResponse> SearchMSearchWithHttpInfo(SearchQueryRequest body, int operationIndex = 0);
        /// <summary>
        /// Update documents to different elasticsearch indexes
        /// </summary>
        /// <remarks>
        /// Update a document or more in a specified ElasticSearch index of a tenant
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchWriteResponse</returns>
        SearchWriteResponse SearchUpdate(SearchWriteRequest body, int operationIndex = 0);

        /// <summary>
        /// Update documents to different elasticsearch indexes
        /// </summary>
        /// <remarks>
        /// Update a document or more in a specified ElasticSearch index of a tenant
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchWriteResponse</returns>
        ApiResponse<SearchWriteResponse> SearchUpdateWithHttpInfo(SearchWriteRequest body, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Indexes configuration
        /// </summary>
        /// <remarks>
        /// Create or update indexes by a passed configuration schema
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SearchConfigurationAsync(SearchConfigRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Indexes configuration
        /// </summary>
        /// <remarks>
        /// Create or update indexes by a passed configuration schema
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SearchConfigurationWithHttpInfoAsync(SearchConfigRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Delete Indexes
        /// </summary>
        /// <remarks>
        /// Delete indexes from ElasticSearch and Cassandra configuration
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchDeleteResponse</returns>
        System.Threading.Tasks.Task<SearchDeleteResponse> SearchDeleteAsync(SearchDeleteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Delete Indexes
        /// </summary>
        /// <remarks>
        /// Delete indexes from ElasticSearch and Cassandra configuration
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchDeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchDeleteResponse>> SearchDeleteWithHttpInfoAsync(SearchDeleteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Insert or replace documents to different elasticsearch indexes
        /// </summary>
        /// <remarks>
        /// Insert or replace a document or more in a specified ElasticSearch index of a tenant
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchWriteResponse</returns>
        System.Threading.Tasks.Task<SearchWriteResponse> SearchInsertOrReplaceAsync(SearchWriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Insert or replace documents to different elasticsearch indexes
        /// </summary>
        /// <remarks>
        /// Insert or replace a document or more in a specified ElasticSearch index of a tenant
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchWriteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchWriteResponse>> SearchInsertOrReplaceWithHttpInfoAsync(SearchWriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Send queries to different elasticsearch indexes
        /// </summary>
        /// <remarks>
        /// MSearch promises to send a list of queries to elasticsearch to be executed on different indexes, it can also be used as an autocomplete by adding the corresponding TYPE
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchQueryResponse</returns>
        System.Threading.Tasks.Task<SearchQueryResponse> SearchMSearchAsync(SearchQueryRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Send queries to different elasticsearch indexes
        /// </summary>
        /// <remarks>
        /// MSearch promises to send a list of queries to elasticsearch to be executed on different indexes, it can also be used as an autocomplete by adding the corresponding TYPE
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchQueryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchQueryResponse>> SearchMSearchWithHttpInfoAsync(SearchQueryRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update documents to different elasticsearch indexes
        /// </summary>
        /// <remarks>
        /// Update a document or more in a specified ElasticSearch index of a tenant
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchWriteResponse</returns>
        System.Threading.Tasks.Task<SearchWriteResponse> SearchUpdateAsync(SearchWriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update documents to different elasticsearch indexes
        /// </summary>
        /// <remarks>
        /// Update a document or more in a specified ElasticSearch index of a tenant
        /// </remarks>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchWriteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchWriteResponse>> SearchUpdateWithHttpInfoAsync(SearchWriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISearchApi : ISearchApiSync, ISearchApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SearchApi : ISearchApi
    {
        private search.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SearchApi(string basePath)
        {
            this.Configuration = search.Client.Configuration.MergeConfigurations(
                search.Client.GlobalConfiguration.Instance,
                new search.Client.Configuration { BasePath = basePath }
            );
            this.Client = new search.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new search.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = search.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SearchApi(search.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = search.Client.Configuration.MergeConfigurations(
                search.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new search.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new search.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = search.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SearchApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SearchApi(search.Client.ISynchronousClient client, search.Client.IAsynchronousClient asyncClient, search.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = search.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public search.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public search.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public search.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public search.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Indexes configuration Create or update indexes by a passed configuration schema
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object SearchConfiguration(SearchConfigRequest body, int operationIndex = 0)
        {
            search.Client.ApiResponse<Object> localVarResponse = SearchConfigurationWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Indexes configuration Create or update indexes by a passed configuration schema
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public search.Client.ApiResponse<Object> SearchConfigurationWithHttpInfo(SearchConfigRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchApi->SearchConfiguration");
            }

            search.Client.RequestOptions localVarRequestOptions = new search.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = search.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SearchApi.SearchConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (geminiAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Gem-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Gem-Token", this.Configuration.GetApiKeyWithPrefix("X-Gem-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/search.Search/Configuration", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Indexes configuration Create or update indexes by a passed configuration schema
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SearchConfigurationAsync(SearchConfigRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            search.Client.ApiResponse<Object> localVarResponse = await SearchConfigurationWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Indexes configuration Create or update indexes by a passed configuration schema
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<search.Client.ApiResponse<Object>> SearchConfigurationWithHttpInfoAsync(SearchConfigRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchApi->SearchConfiguration");
            }


            search.Client.RequestOptions localVarRequestOptions = new search.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = search.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SearchApi.SearchConfiguration";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (geminiAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Gem-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Gem-Token", this.Configuration.GetApiKeyWithPrefix("X-Gem-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/search.Search/Configuration", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchConfiguration", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Indexes Delete indexes from ElasticSearch and Cassandra configuration
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchDeleteResponse</returns>
        public SearchDeleteResponse SearchDelete(SearchDeleteRequest body, int operationIndex = 0)
        {
            search.Client.ApiResponse<SearchDeleteResponse> localVarResponse = SearchDeleteWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Indexes Delete indexes from ElasticSearch and Cassandra configuration
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchDeleteResponse</returns>
        public search.Client.ApiResponse<SearchDeleteResponse> SearchDeleteWithHttpInfo(SearchDeleteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchApi->SearchDelete");
            }

            search.Client.RequestOptions localVarRequestOptions = new search.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = search.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SearchApi.SearchDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (geminiAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Gem-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Gem-Token", this.Configuration.GetApiKeyWithPrefix("X-Gem-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchDeleteResponse>("/search.Search/Delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Indexes Delete indexes from ElasticSearch and Cassandra configuration
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchDeleteResponse</returns>
        public async System.Threading.Tasks.Task<SearchDeleteResponse> SearchDeleteAsync(SearchDeleteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            search.Client.ApiResponse<SearchDeleteResponse> localVarResponse = await SearchDeleteWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Indexes Delete indexes from ElasticSearch and Cassandra configuration
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchDeleteResponse)</returns>
        public async System.Threading.Tasks.Task<search.Client.ApiResponse<SearchDeleteResponse>> SearchDeleteWithHttpInfoAsync(SearchDeleteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchApi->SearchDelete");
            }


            search.Client.RequestOptions localVarRequestOptions = new search.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = search.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SearchApi.SearchDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (geminiAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Gem-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Gem-Token", this.Configuration.GetApiKeyWithPrefix("X-Gem-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchDeleteResponse>("/search.Search/Delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Insert or replace documents to different elasticsearch indexes Insert or replace a document or more in a specified ElasticSearch index of a tenant
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchWriteResponse</returns>
        public SearchWriteResponse SearchInsertOrReplace(SearchWriteRequest body, int operationIndex = 0)
        {
            search.Client.ApiResponse<SearchWriteResponse> localVarResponse = SearchInsertOrReplaceWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insert or replace documents to different elasticsearch indexes Insert or replace a document or more in a specified ElasticSearch index of a tenant
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchWriteResponse</returns>
        public search.Client.ApiResponse<SearchWriteResponse> SearchInsertOrReplaceWithHttpInfo(SearchWriteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchApi->SearchInsertOrReplace");
            }

            search.Client.RequestOptions localVarRequestOptions = new search.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = search.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SearchApi.SearchInsertOrReplace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (geminiAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Gem-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Gem-Token", this.Configuration.GetApiKeyWithPrefix("X-Gem-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchWriteResponse>("/search.Search/InsertOrReplace", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchInsertOrReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Insert or replace documents to different elasticsearch indexes Insert or replace a document or more in a specified ElasticSearch index of a tenant
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchWriteResponse</returns>
        public async System.Threading.Tasks.Task<SearchWriteResponse> SearchInsertOrReplaceAsync(SearchWriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            search.Client.ApiResponse<SearchWriteResponse> localVarResponse = await SearchInsertOrReplaceWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Insert or replace documents to different elasticsearch indexes Insert or replace a document or more in a specified ElasticSearch index of a tenant
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchWriteResponse)</returns>
        public async System.Threading.Tasks.Task<search.Client.ApiResponse<SearchWriteResponse>> SearchInsertOrReplaceWithHttpInfoAsync(SearchWriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchApi->SearchInsertOrReplace");
            }


            search.Client.RequestOptions localVarRequestOptions = new search.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = search.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SearchApi.SearchInsertOrReplace";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (geminiAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Gem-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Gem-Token", this.Configuration.GetApiKeyWithPrefix("X-Gem-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchWriteResponse>("/search.Search/InsertOrReplace", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchInsertOrReplace", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send queries to different elasticsearch indexes MSearch promises to send a list of queries to elasticsearch to be executed on different indexes, it can also be used as an autocomplete by adding the corresponding TYPE
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchQueryResponse</returns>
        public SearchQueryResponse SearchMSearch(SearchQueryRequest body, int operationIndex = 0)
        {
            search.Client.ApiResponse<SearchQueryResponse> localVarResponse = SearchMSearchWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send queries to different elasticsearch indexes MSearch promises to send a list of queries to elasticsearch to be executed on different indexes, it can also be used as an autocomplete by adding the corresponding TYPE
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchQueryResponse</returns>
        public search.Client.ApiResponse<SearchQueryResponse> SearchMSearchWithHttpInfo(SearchQueryRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchApi->SearchMSearch");
            }

            search.Client.RequestOptions localVarRequestOptions = new search.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = search.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SearchApi.SearchMSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (geminiAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Gem-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Gem-Token", this.Configuration.GetApiKeyWithPrefix("X-Gem-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchQueryResponse>("/search.Search/MSearch", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send queries to different elasticsearch indexes MSearch promises to send a list of queries to elasticsearch to be executed on different indexes, it can also be used as an autocomplete by adding the corresponding TYPE
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchQueryResponse</returns>
        public async System.Threading.Tasks.Task<SearchQueryResponse> SearchMSearchAsync(SearchQueryRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            search.Client.ApiResponse<SearchQueryResponse> localVarResponse = await SearchMSearchWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Send queries to different elasticsearch indexes MSearch promises to send a list of queries to elasticsearch to be executed on different indexes, it can also be used as an autocomplete by adding the corresponding TYPE
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchQueryResponse)</returns>
        public async System.Threading.Tasks.Task<search.Client.ApiResponse<SearchQueryResponse>> SearchMSearchWithHttpInfoAsync(SearchQueryRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchApi->SearchMSearch");
            }


            search.Client.RequestOptions localVarRequestOptions = new search.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = search.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SearchApi.SearchMSearch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (geminiAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Gem-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Gem-Token", this.Configuration.GetApiKeyWithPrefix("X-Gem-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchQueryResponse>("/search.Search/MSearch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMSearch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update documents to different elasticsearch indexes Update a document or more in a specified ElasticSearch index of a tenant
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchWriteResponse</returns>
        public SearchWriteResponse SearchUpdate(SearchWriteRequest body, int operationIndex = 0)
        {
            search.Client.ApiResponse<SearchWriteResponse> localVarResponse = SearchUpdateWithHttpInfo(body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update documents to different elasticsearch indexes Update a document or more in a specified ElasticSearch index of a tenant
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchWriteResponse</returns>
        public search.Client.ApiResponse<SearchWriteResponse> SearchUpdateWithHttpInfo(SearchWriteRequest body, int operationIndex = 0)
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchApi->SearchUpdate");
            }

            search.Client.RequestOptions localVarRequestOptions = new search.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = search.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SearchApi.SearchUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (geminiAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Gem-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Gem-Token", this.Configuration.GetApiKeyWithPrefix("X-Gem-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SearchWriteResponse>("/search.Search/Update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update documents to different elasticsearch indexes Update a document or more in a specified ElasticSearch index of a tenant
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchWriteResponse</returns>
        public async System.Threading.Tasks.Task<SearchWriteResponse> SearchUpdateAsync(SearchWriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            search.Client.ApiResponse<SearchWriteResponse> localVarResponse = await SearchUpdateWithHttpInfoAsync(body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update documents to different elasticsearch indexes Update a document or more in a specified ElasticSearch index of a tenant
        /// </summary>
        /// <exception cref="search.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchWriteResponse)</returns>
        public async System.Threading.Tasks.Task<search.Client.ApiResponse<SearchWriteResponse>> SearchUpdateWithHttpInfoAsync(SearchWriteRequest body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchApi->SearchUpdate");
            }


            search.Client.RequestOptions localVarRequestOptions = new search.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = search.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "SearchApi.SearchUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (standardAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }
            // authentication (geminiAuthorization) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Gem-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Gem-Token", this.Configuration.GetApiKeyWithPrefix("X-Gem-Token"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SearchWriteResponse>("/search.Search/Update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
