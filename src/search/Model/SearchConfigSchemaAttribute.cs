/*
 * Search Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = search.Client.OpenAPIDateConverter;

namespace search.Model
{
    /// <summary>
    /// contains the configurations needed to define an attribute within documents
    /// </summary>
    [DataContract(Name = "searchConfigSchemaAttribute")]
    public partial class SearchConfigSchemaAttribute : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public SearchConfigSchemaAttributeType? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchConfigSchemaAttribute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchConfigSchemaAttribute()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchConfigSchemaAttribute" /> class.
        /// </summary>
        /// <param name="name">attribute name (required).</param>
        /// <param name="type">type.</param>
        /// <param name="language">locale code (currently only it_IT and en_US are supported).</param>
        public SearchConfigSchemaAttribute(string name = default(string), SearchConfigSchemaAttributeType? type = default(SearchConfigSchemaAttributeType?), string language = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SearchConfigSchemaAttribute and cannot be null");
            }
            this.Name = name;
            this.Type = type;
            this.Language = language;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// attribute name
        /// </summary>
        /// <value>attribute name</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// locale code (currently only it_IT and en_US are supported)
        /// </summary>
        /// <value>locale code (currently only it_IT and en_US are supported)</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchConfigSchemaAttribute {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
