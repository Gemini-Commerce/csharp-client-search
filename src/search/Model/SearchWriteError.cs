/*
 * Search Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = search.Client.OpenAPIDateConverter;

namespace search.Model
{
    /// <summary>
    /// contain error information obtained during writing process in search storage
    /// </summary>
    [DataContract(Name = "searchWriteError")]
    public partial class SearchWriteError : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchWriteError" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchWriteError()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchWriteError" /> class.
        /// </summary>
        /// <param name="code">error identifier code (required).</param>
        /// <param name="documentKeyName">document key used to identify document.</param>
        /// <param name="documentKeyValue">document key identifier.</param>
        /// <param name="message">error description message (required).</param>
        public SearchWriteError(string code = default(string), string documentKeyName = default(string), string documentKeyValue = default(string), string message = default(string))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for SearchWriteError and cannot be null");
            }
            this.Code = code;
            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new ArgumentNullException("message is a required property for SearchWriteError and cannot be null");
            }
            this.Message = message;
            this.DocumentKeyName = documentKeyName;
            this.DocumentKeyValue = documentKeyValue;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// error identifier code
        /// </summary>
        /// <value>error identifier code</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// document key used to identify document
        /// </summary>
        /// <value>document key used to identify document</value>
        [DataMember(Name = "documentKeyName", EmitDefaultValue = false)]
        public string DocumentKeyName { get; set; }

        /// <summary>
        /// document key identifier
        /// </summary>
        /// <value>document key identifier</value>
        [DataMember(Name = "documentKeyValue", EmitDefaultValue = false)]
        public string DocumentKeyValue { get; set; }

        /// <summary>
        /// error description message
        /// </summary>
        /// <value>error description message</value>
        [DataMember(Name = "message", IsRequired = true, EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchWriteError {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DocumentKeyName: ").Append(DocumentKeyName).Append("\n");
            sb.Append("  DocumentKeyValue: ").Append(DocumentKeyValue).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
