/*
 * Search Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = search.Client.OpenAPIDateConverter;

namespace search.Model
{
    /// <summary>
    /// contains index configurations fields
    /// </summary>
    [DataContract(Name = "searchConfigSchema")]
    public partial class SearchConfigSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchConfigSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchConfigSchema()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchConfigSchema" /> class.
        /// </summary>
        /// <param name="index">index name, to create or where update configuration (required).</param>
        /// <param name="documentKeyName">field which value will be used as document id [#DOCGENBUG REQUIRED FIELD].</param>
        /// <param name="attributes">fields that can be stored into index and later retrieved (required).</param>
        /// <param name="searchables">fields that can be used for fulltext searches.</param>
        /// <param name="facets">fields that can be used for aggregations.</param>
        /// <param name="filters">fields that can be used for filtering.</param>
        /// <param name="sortables">fields that can be used for sorting.</param>
        public SearchConfigSchema(string index = default(string), string documentKeyName = default(string), List<SearchConfigSchemaAttribute> attributes = default(List<SearchConfigSchemaAttribute>), List<SearchConfigSchemaSearchable> searchables = default(List<SearchConfigSchemaSearchable>), List<SearchConfigSchemaFacet> facets = default(List<SearchConfigSchemaFacet>), List<SearchConfigSchemaFilter> filters = default(List<SearchConfigSchemaFilter>), List<SearchConfigSchemaSortable> sortables = default(List<SearchConfigSchemaSortable>))
        {
            // to ensure "index" is required (not null)
            if (index == null)
            {
                throw new ArgumentNullException("index is a required property for SearchConfigSchema and cannot be null");
            }
            this.Index = index;
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new ArgumentNullException("attributes is a required property for SearchConfigSchema and cannot be null");
            }
            this.Attributes = attributes;
            this.DocumentKeyName = documentKeyName;
            this.Searchables = searchables;
            this.Facets = facets;
            this.Filters = filters;
            this.Sortables = sortables;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// index name, to create or where update configuration
        /// </summary>
        /// <value>index name, to create or where update configuration</value>
        [DataMember(Name = "index", IsRequired = true, EmitDefaultValue = true)]
        public string Index { get; set; }

        /// <summary>
        /// field which value will be used as document id [#DOCGENBUG REQUIRED FIELD]
        /// </summary>
        /// <value>field which value will be used as document id [#DOCGENBUG REQUIRED FIELD]</value>
        [DataMember(Name = "documentKeyName", EmitDefaultValue = false)]
        public string DocumentKeyName { get; set; }

        /// <summary>
        /// fields that can be stored into index and later retrieved
        /// </summary>
        /// <value>fields that can be stored into index and later retrieved</value>
        [DataMember(Name = "attributes", IsRequired = true, EmitDefaultValue = true)]
        public List<SearchConfigSchemaAttribute> Attributes { get; set; }

        /// <summary>
        /// fields that can be used for fulltext searches
        /// </summary>
        /// <value>fields that can be used for fulltext searches</value>
        [DataMember(Name = "searchables", EmitDefaultValue = false)]
        public List<SearchConfigSchemaSearchable> Searchables { get; set; }

        /// <summary>
        /// fields that can be used for aggregations
        /// </summary>
        /// <value>fields that can be used for aggregations</value>
        [DataMember(Name = "facets", EmitDefaultValue = false)]
        public List<SearchConfigSchemaFacet> Facets { get; set; }

        /// <summary>
        /// fields that can be used for filtering
        /// </summary>
        /// <value>fields that can be used for filtering</value>
        [DataMember(Name = "filters", EmitDefaultValue = false)]
        public List<SearchConfigSchemaFilter> Filters { get; set; }

        /// <summary>
        /// fields that can be used for sorting
        /// </summary>
        /// <value>fields that can be used for sorting</value>
        [DataMember(Name = "sortables", EmitDefaultValue = false)]
        public List<SearchConfigSchemaSortable> Sortables { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchConfigSchema {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  DocumentKeyName: ").Append(DocumentKeyName).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Searchables: ").Append(Searchables).Append("\n");
            sb.Append("  Facets: ").Append(Facets).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Sortables: ").Append(Sortables).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
