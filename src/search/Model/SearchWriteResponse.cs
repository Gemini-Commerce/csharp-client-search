/*
 * Search Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = search.Client.OpenAPIDateConverter;

namespace search.Model
{
    /// <summary>
    /// contains write operation result response from search service
    /// </summary>
    [DataContract(Name = "searchWriteResponse")]
    public partial class SearchWriteResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchWriteResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchWriteResponse()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchWriteResponse" /> class.
        /// </summary>
        /// <param name="index">elasticsearch index where the write request was processed (required).</param>
        /// <param name="errors">array of errors obtained during elasticsearch documents write or update.</param>
        public SearchWriteResponse(string index = default(string), List<SearchWriteError> errors = default(List<SearchWriteError>))
        {
            // to ensure "index" is required (not null)
            if (index == null)
            {
                throw new ArgumentNullException("index is a required property for SearchWriteResponse and cannot be null");
            }
            this.Index = index;
            this.Errors = errors;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// elasticsearch index where the write request was processed
        /// </summary>
        /// <value>elasticsearch index where the write request was processed</value>
        [DataMember(Name = "index", IsRequired = true, EmitDefaultValue = true)]
        public string Index { get; set; }

        /// <summary>
        /// array of errors obtained during elasticsearch documents write or update
        /// </summary>
        /// <value>array of errors obtained during elasticsearch documents write or update</value>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<SearchWriteError> Errors { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchWriteResponse {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Errors: ").Append(Errors).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
