/*
 * Search Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = search.Client.OpenAPIDateConverter;

namespace search.Model
{
    /// <summary>
    /// contains params needed to perform search
    /// </summary>
    [DataContract(Name = "searchParams")]
    public partial class SearchParams : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchParams" /> class.
        /// </summary>
        /// <param name="offset">number of the record where to start to take result for pagination.</param>
        /// <param name="limit">number of search result for page.</param>
        /// <param name="term">term to search.</param>
        /// <param name="searchables">list of attributes where to search the indicated term, if not indicated it uses all in those present in index configuration.</param>
        /// <param name="filters">list of attribute and relative value which you want to filter search results.</param>
        /// <param name="attributes">attributes that you want to be present in search results.</param>
        /// <param name="facets">list of attributes you want to create aggregation to make filter suggestion.</param>
        /// <param name="sorts">params to sort search results.</param>
        /// <param name="minScore">minScore.</param>
        public SearchParams(long offset = default(long), long limit = default(long), string term = default(string), List<SearchParamSearchable> searchables = default(List<SearchParamSearchable>), List<SearchParamFilter> filters = default(List<SearchParamFilter>), List<SearchParamAttribute> attributes = default(List<SearchParamAttribute>), List<SearchParamFacet> facets = default(List<SearchParamFacet>), List<SearchParamSort> sorts = default(List<SearchParamSort>), float minScore = default(float))
        {
            this.Offset = offset;
            this.Limit = limit;
            this.Term = term;
            this.Searchables = searchables;
            this.Filters = filters;
            this.Attributes = attributes;
            this.Facets = facets;
            this.Sorts = sorts;
            this.MinScore = minScore;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// number of the record where to start to take result for pagination
        /// </summary>
        /// <value>number of the record where to start to take result for pagination</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public long Offset { get; set; }

        /// <summary>
        /// number of search result for page
        /// </summary>
        /// <value>number of search result for page</value>
        [DataMember(Name = "limit", EmitDefaultValue = false)]
        public long Limit { get; set; }

        /// <summary>
        /// term to search
        /// </summary>
        /// <value>term to search</value>
        [DataMember(Name = "term", EmitDefaultValue = false)]
        public string Term { get; set; }

        /// <summary>
        /// list of attributes where to search the indicated term, if not indicated it uses all in those present in index configuration
        /// </summary>
        /// <value>list of attributes where to search the indicated term, if not indicated it uses all in those present in index configuration</value>
        [DataMember(Name = "searchables", EmitDefaultValue = false)]
        public List<SearchParamSearchable> Searchables { get; set; }

        /// <summary>
        /// list of attribute and relative value which you want to filter search results
        /// </summary>
        /// <value>list of attribute and relative value which you want to filter search results</value>
        [DataMember(Name = "filters", EmitDefaultValue = false)]
        public List<SearchParamFilter> Filters { get; set; }

        /// <summary>
        /// attributes that you want to be present in search results
        /// </summary>
        /// <value>attributes that you want to be present in search results</value>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public List<SearchParamAttribute> Attributes { get; set; }

        /// <summary>
        /// list of attributes you want to create aggregation to make filter suggestion
        /// </summary>
        /// <value>list of attributes you want to create aggregation to make filter suggestion</value>
        [DataMember(Name = "facets", EmitDefaultValue = false)]
        public List<SearchParamFacet> Facets { get; set; }

        /// <summary>
        /// params to sort search results
        /// </summary>
        /// <value>params to sort search results</value>
        [DataMember(Name = "sorts", EmitDefaultValue = false)]
        public List<SearchParamSort> Sorts { get; set; }

        /// <summary>
        /// Gets or Sets MinScore
        /// </summary>
        [DataMember(Name = "minScore", EmitDefaultValue = false)]
        public float MinScore { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchParams {\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Term: ").Append(Term).Append("\n");
            sb.Append("  Searchables: ").Append(Searchables).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Facets: ").Append(Facets).Append("\n");
            sb.Append("  Sorts: ").Append(Sorts).Append("\n");
            sb.Append("  MinScore: ").Append(MinScore).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
